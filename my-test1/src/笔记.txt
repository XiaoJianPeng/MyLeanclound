数据存储开发指南：https://leancloud.cn/docs/leanstorage_guide-js.html#hash7247859
后台管理：https://leancloud.cn/dashboard/data.html?appid=VKJfEk81YqWIqkxLtqxlyGpH-gzGzoHsz#/TestObject
import AV from 'leancloud-storage'

var APP_ID = 'VKJfEk81YqWIqkxLtqxlyGpH-gzGzoHsz';
var APP_KEY = 'H1hrm0dJWbnpzFAS6jJRsmuD';      
//初始化
AV.init({
  appId: APP_ID,
  appKey: APP_KEY
});
如果AV是在main.js文件中引入，App.Vue中使用AV时需要再添加import AV from 'leancloud-storage'

数据类型
AV.Object 支持以下数据类型：

+
  // 该语句应该只声明一次
  var TestObject = AV.Object.extend('DataTypeTest');

  var number = 2014;
  var string = 'famous film name is ' + number;
  var date = new Date();
  var array = [string, number];
  var object = { number: number, string: string };

  var testObject = new TestObject();
  testObject.set('testNumber', number);
  testObject.set('testString', string);
  testObject.set('testDate', date);
  testObject.set('testArray', array);
  testObject.set('testObject', object);
  testObject.set('testNull', null);
  testObject.save().then(function(testObject) {
    // 成功
  }, function(error) {
    // 失败
  });
+
我们不推荐在 AV.Object 中储存大块的二进制数据，比如图片或整个文件。每个 AV.Object 的大小都不应超过 128 KB。如果需要储存更多的数据，建议使用 AV.File。

+
注意，时间类型在云端将会以 UTC 时间格式存储，但是客户端在读取之后会做转化成本地时间。

ES6语法：

class Todo extends AV.Object {}
// 需要向 SDK 注册这个 Class
AV.Object.register(Todo);
+
若想了解更多有关 LeanStorage 如何解析处理数据的信息，请查看专题文档《数据与安全》。

创建数据表时会默认生成以下字段：

内置属性	类型	描述
objectId	String	该对象唯一的 Id 标识
ACL	ACL	该对象的权限控制，实际上是一个 JSON 对象，控制台做了展现优化。
createdAt	Date	该对象被创建的 UTC 时间
updatedAt	Date	该对象最后一次被修改的时间
注意：自定义的属性名，不能以双下划线 __ 开头，也不能与以下系统保留字段和内置属性重名（不区分大小写）。
ACL、className、createdAt、objectId、updatedAt
属性值
可以是字符串、数字、布尔值、数组或字典。 建议驼峰命名法

一些默认的数据类型被序列化之后的格式：

+
类型	序列化之后的格式
Date	{"__type": "Date","iso": "2015-11-21T18:02:52.249Z"}
Buffer	{"__type": "Bytes","base64":"utf-8-encoded-string}"
Pointer	{"__type":"Pointer","className":"Todo","objectId":"55a39634e4b0ed48f0c1845c"}
AV.Relation	{"__type": "Relation","className": "Todo"}
//添加和查询
methods:{
    userAdd(){      
      //新建对象
      var userInfo=new UserInfo();
      userInfo.set('name',this.name);
      userInfo.set('gender',this.gender);
      userInfo.set('Age',this.age);
      userInfo.set('Phone',this.phone);
      userInfo.save().then(function (user){
       this.usermsg=user.toJSON();
      }.bind(this),function(error){
        console.error(error);
      })
    },
    queryById(value){
      var query=new AV.Query('UserInfo');
      query.get(value).then(function (user) {
        //获取成功
        this.currName=user.get('name'); //单独获取某个属性值
        this.usermsg=user.toJSON();
      }.bind(this),function(error){
        console.error(error);
      });
    }
  }

  // 获取三个特殊属性
    var objectId = todo.id;
    var updatedAt = todo.updatedAt;
    var createdAt = todo.createdAt;


同步对象

多终端共享一个数据时，为了确保当前客户端拿到的对象数据是最新的，可以调用刷新接口来确保本地数据与云端的同步：

+
  // 使用已知 objectId 构建一个 AV.Object
  var todo = new Todo();
  todo.id = '5590cdfde4b00f7adb5860c8';
  todo.fetch().then(function (todo) {
    // // todo 是从服务器加载到本地的 Todo 对象
    var priority = todo.get('priority');
  }, function (error) {

  });
同步指定属性
目前 Todo 这个类已有四个自定义属性：priority、content、location 和 title。为了节省流量，现在只想刷新 priority 和 location 可以使用如下方式：

+
  // 使用已知 objectId 构建一个 AV.Object
  var todo = new Todo();
  todo.id = '5590cdfde4b00f7adb5860c8';
  todo.fetch({
    keys: 'priority,location'
  }).then(function (todo) {
    // 获取到本地
  }, function (error) {
    // 异常处理
    console.error(error);
  });
刷新操作会强行使用云端的属性值覆盖本地的属性。因此如果本地有属性修改，刷新操作会丢弃这些修改。
更新对象
1.LeanStorage 上的更新对象都是针对单个对象，云端会根据有没有 objectId 来决定是新增还是更新一个对象。
假如 id 已知，则可以通过如下接口从本地构建一个 AV.Object 来更新这个对象：
var user =new AV.Object.createWithoutData('UserInfo',value)
      user.set('name','张双双');
      user.save();

数组更新 
更新数组也是原子操作。使用以下方法可以方便地维护数组类型的数据：

AV.Object.add('arrayKey', value)

将指定对象附加到数组末尾。
AV.Object.addUnique('arrayKey', value);
如果数组中不包含指定对象，将该对象加入数组，对象的插入位置是随机的。
AV.Object.remove('arrayKey', value);
从数组字段中删除指定对象的所有实例。
例子：updateById(value){ //根据id更新
      var reminder1 = new Date('2015-11-11 08:15:00');
      var reminder2 = new Date('2015-11-11 08:20:00');
      var reminder3 = new Date('2015-11-11 08:30:00');
      var reminders = [reminder1, reminder2, reminder3];
      var user =new AV.Object.createWithoutData('UserInfo',value)
      // user.set('reminders',reminders);
      user.addUnique('reminders',reminders);
      user.save();
删除对象

注意：删除的对象不存在也会提示删除成功！
deleteUser(value){
      var user=AV.Object.createWithoutData('UserInfo',value);
  
      user.destroy().then(function(success){    
        if(success.createdAt==null){
          alert('要删除的用户不存在！');
        }
        else{
          alert('删除成功！');
        }
        
      },function(error){
        alert(error)
      });
    },


数据协议

很多开发者在使用 LeanStorage 初期都会产生疑惑：客户端的数据类型是如何被云端识别的？ 因此，我们有必要重点介绍一下 LeanStorage 的数据协议。

+
先从一个简单的日期类型入手，比如在 JavaScript 中，默认的日期类型是 Date，下面会详细讲解一个 Date 是如何被云端正确的按照日期格式存储的。

+
为一个普通的 AV.Object 的设置一个 Date 的属性，然后调用保存的接口：

+
  var testDate = new Date('2016-06-04');
  var testAVObject = new AV.Object('TestClass');
  testAVObject.set('testDate', testDate);
  testAVObject.save();
+
JavaScript SDK 在真正调用保存接口之前，会自动的调用一次序列化的方法，将 Date 类型的数据，转化为如下格式的数据：

+
{
  "__type": "Date",
  "iso": "2015-11-21T18:02:52.249Z"
}
+
然后发送给云端，云端会自动进行反序列化，这样自然就知道这个数据类型是日期，然后按照传过来的有效值进行存储。因此，开发者在进阶开发的阶段，最好是能掌握 LeanStorage 的数据协议。如下表介绍的就是一些默认的数据类型被序列化之后的格式：

+
类型	序列化之后的格式
Date	{"__type": "Date","iso": "2015-11-21T18:02:52.249Z"}
Buffer	{"__type": "Bytes","base64":"utf-8-encoded-string}"
Pointer	{"__type":"Pointer","className":"Todo","objectId":"55a39634e4b0ed48f0c1845c"}
AV.Relation	{"__type": "Relation","className": "Todo"}

文件上传：
<input Type="button" value="从数据流创建文件" @click="createFile()">
         <br>
         <input type="file" id="photoFileUpload" @change="uploadFile" /> 
         <input Type="button" value="上传" @click="upload()">
         <br>
         <progress v-show="progressCurrent>0" :value="progressCurrent" max=100 ></progress>
 

createFile(){//从数据流构建文件
      var data ={base64:'6K+077yM5L2g5Li65LuA5LmI6KaB56C06Kej5oiR77yf'};
      var file=new AV.File('resume.txt',data);
      file.save();

      var bytes= [0xBE, 0xEF, 0xCA, 0xFE];
      var byteArrayFile=new AV.File('myFile.txt',bytes);
      byteArrayFile.save();
    },
    uploadFile($event){//获取选中的文件
      this.file = $event.target.files[0];
    },
    upload(){
      if(this.file.name==null){
        alert('文件为空！');
        return;
      }     
      var _this=this;   
      var file=new AV.File(this.file.name,this.file);
      //保存文件
      file.save({
        onprogress(e){//监听上传进度
          console.log(e);
          _this.progressCurrent=e.percent;
        }
      }).then(function(file){
        console.log(file.url());
      },function(error){
        console.error(error);
      });
    }

文件删除
默认情况下，文件的删除权限是关闭的，需要进入 控制台 > 存储 > _File，选择菜单 其他 > 权限设置 > delete 来开启。

 var file =AV.File.createWithoutData('5a72f5f3ac502e00389d9c09');
      file.destroy().then(function(success){
        alert('删除成功！');
      },function(error){
        console.error(error);
      });

